service: reddit
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs22.x
  timeout: 30
  profile: c0rbot
  versionFunctions: false
  environment: ${file(environment.js):environment}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:*:*:table/feeds-${sls:stage}
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:*:*:table/dota-players-${sls:stage}
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:*:*:table/fortnite
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:*:*:table/config
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:*:*:table/matches
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:*:*:table/cache
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-dotaAnalyst
        - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-dotaAnalyst:*
        - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-deadlockAnalyst
        - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-deadlockAnalyst:*
    - Effect: Allow
      Action:
        - scheduler:CreateSchedule
        - scheduler:DeleteSchedule
        - scheduler:GetSchedule
      Resource:
        - arn:aws:scheduler:${aws:region}:${aws:accountId}:schedule/default/retry-*
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource:
        - arn:aws:iam::${aws:accountId}:role/${self:service}-${sls:stage}-scheduler-role

functions:
  redditFeed:
    environment:
      table: feeds-${sls:stage}
    handler: handler.redditFeed
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: false
  dotaBlog:
    environment:
      table: feeds-${sls:stage}
    handler: handler.dotaBlog
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: false
  pokemongoUpdates:
    environment:
      table: feeds-${sls:stage}
    handler: handler.pokemongoUpdates
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: false
  twitchStreams:
    environment:
      table: feeds-${sls:stage}
    handler: handler.twitchStreams
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: false
  arkChangelog:
    environment:
      table: feeds-${sls:stage}
    handler: handler.arkChangelog
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: false
  dotaMatches:
    environment:
      table: dota-players-${sls:stage}
    handler: handler.dotaMatches
  openDotaMatches:
    environment:
      table: dota-players-${sls:stage}
    handler: handler.openDotaMatches
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true
  dotaUpdates:
    environment:
      table: feeds-${sls:stage}
    handler: handler.dotaUpdates
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: false
  steamUpdates:
    environment:
      table: feeds-${sls:stage}
    handler: handler.steamUpdates
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: false
  fortniteMatches:
    environment:
      table: fortnite
    handler: handler.fortniteMatches
    events:
      - schedule:
          rate: rate(15 minutes)
          enabled: false
  fortniteChangelog:
    environment:
      table: feeds-${sls:stage}
    handler: handler.fortniteChangelog
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: false
  pubgMatches:
    environment:
      table: pubg
    handler: handler.pubgMatches
    timeout: 300
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: false
  underlordsChangelog:
    environment:
      table: feeds-${sls:stage}
    handler: handler.underlordsChangelog
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: false
  valheimPatches:
    environment:
      table: feeds-${sls:stage}
    handler: handlers/valheim.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true
  noMansSkyPatches:
    environment:
      table: feeds-${sls:stage}
    handler: handlers/NoMansSky.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true
  loopHeroPatches:
    environment:
      table: feeds-${sls:stage}
    handler: handlers/LoopHero.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: false
  deadlockMatches:
    environment:
      table: deadlock-players-${sls:stage}
    handler: handlers/DeadlockMatches.handler
    timeout: 60
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: true
  deadlockPatches:
    environment:
      table: feeds-${sls:stage}
    handler: handlers/DeadlockPatches.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true
  dotaNews:
    environment:
      table: feeds-${sls:stage}
    handler: handlers/DotaNews.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true
  discordWebhookHandler:
    handler: handlers/DiscordWebhookHandler.handler
    url:
      authType: NONE
  dotaAnalyst:
    handler: handlers/DotaAnalyst.handler
    timeout: 180
  deadlockAnalyst:
    handler: handlers/DeadlockAnalyst.handler
    timeout: 180
  embedTest:
    handler: handler.embedTest

resources:
  Resources:
    EventBridgeSchedulerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${sls:stage}-scheduler-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: InvokeLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-dotaAnalyst
    FeedsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: feeds-${sls:stage}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DotaPlayersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dota-players-${sls:stage}
        AttributeDefinitions:
          - AttributeName: steamID
            AttributeType: S
        KeySchema:
          - AttributeName: steamID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    FortniteTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: fortnite
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MatchesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: matches
        AttributeDefinitions:
          - AttributeName: player_id
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: player_id
            KeyType: HASH
          - AttributeName: game
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: config
        AttributeDefinitions:
          - AttributeName: Key
            AttributeType: S
          - AttributeName: ConfigScope
            AttributeType: S
        KeySchema:
          - AttributeName: Key
            KeyType: HASH
          - AttributeName: ConfigScope
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: cache
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
